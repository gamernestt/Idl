// Firefox-Compatible GitHub Codespaces Keep-Alive
// Run this in Firefox's console (F12 > Console)

(function() {
    // Configuration
    const config = {
        clickInterval: 55000,        // 55 seconds between clicks
        moveInterval: 35000,         // 35 seconds between mouse movements
        activityInterval: 300000,    // 5 minutes between major activities
        maxClicks: 1,                // More subtle interactions
        debug: true,                 // Show console logs
        persistenceKey: 'firefoxCodespacesKeepAlive'
    };

    // Firefox-specific initialization
    function init() {
        // Check if we should auto-start
        const shouldAutoStart = () => {
            try {
                return localStorage.getItem(config.persistenceKey) === 'true';
            } catch (e) {
                console.warn('Firefox localStorage access error:', e);
                return false;
            }
        };

        if (shouldAutoStart()) {
            // Firefox-specific DOM ready check
            const checkReady = () => {
                if (document.readyState === 'complete') {
                    setTimeout(startKeepAlive, 2000);
                } else {
                    document.addEventListener('DOMContentLoaded', () => {
                        setTimeout(startKeepAlive, 2000);
                    });
                }
            };
            checkReady();
        }

        // Firefox-compatible element finder
        const findInteractiveElements = () => {
            const selectors = [
                // GitHub Codespaces specific elements
                '.editor-actions .action-label',
                '.statusbar-item',
                '.tabs-container .tab',
                '.explorer-item',
                '[data-testid="codespaces-activity-bar-tab"]',
                
                // Firefox-optimized selectors
                'button:not([disabled])',
                'a[href]',
                'div[role="button"]',
                '[tabindex="0"]'
            ];

            let elements = [];
            selectors.forEach(selector => {
                try {
                    elements = elements.concat([...document.querySelectorAll(selector)]);
                } catch (e) {
                    if (config.debug) console.log('Firefox selector error:', e);
                }
            });

            return elements.filter(el => {
                try {
                    const rect = el.getBoundingClientRect();
                    const style = window.getComputedStyle(el);
                    return rect.width > 0 && 
                           rect.height > 0 && 
                           style.visibility === 'visible' &&
                           style.display !== 'none' &&
                           style.pointerEvents !== 'none';
                } catch (e) {
                    return false;
                }
            });
        };

        // Firefox-compatible event simulation
        const simulateMouseMove = () => {
            const x = window.scrollX + Math.random() * window.innerWidth;
            const y = window.scrollY + Math.random() * window.innerHeight;
            
            // Firefox-compatible event dispatch
            const events = [
                new MouseEvent('mouseover', { bubbles: true, view: window }),
                new MouseEvent('mousemove', { 
                    clientX: x, 
                    clientY: y, 
                    bubbles: true, 
                    view: window 
                })
            ];
            
            events.forEach(event => {
                try {
                    document.dispatchEvent(event);
                } catch (e) {
                    if (config.debug) console.log('Firefox mouse event error:', e);
                }
            });
            
            if (config.debug) console.log(`Mouse moved to (${Math.round(x)}, ${Math.round(y)})`);
        };

        // Firefox-compatible click simulation
        const simulateClick = (element) => {
            if (!element) return false;
            
            try {
                const rect = element.getBoundingClientRect();
                const x = rect.left + rect.width/2;
                const y = rect.top + rect.height/2;
                
                const events = [
                    new MouseEvent('mouseover', { bubbles: true, view: window }),
                    new MouseEvent('mousedown', { 
                        bubbles: true, 
                        clientX: x, 
                        clientY: y, 
                        view: window,
                        buttons: 1
                    }),
                    new MouseEvent('mouseup', { 
                        bubbles: true, 
                        clientX: x, 
                        clientY: y, 
                        view: window 
                    }),
                    new MouseEvent('click', { 
                        bubbles: true, 
                        clientX: x, 
                        clientY: y, 
                        view: window 
                    })
                ];
                
                events.forEach(event => {
                    element.dispatchEvent(event);
                });
                
                return true;
            } catch (e) {
                if (config.debug) console.log('Firefox click error:', e);
                return false;
            }
        };

        // Main keep-alive function
        const performKeepAliveActions = () => {
            const elements = findInteractiveElements();
            if (elements.length === 0) {
                if (config.debug) console.log('No interactive elements found');
                return;
            }
            
            const element = elements[Math.floor(Math.random() * elements.length)];
            if (simulateClick(element) && config.debug) {
                console.log(`Clicked on ${element.tagName.toLowerCase()}${element.id ? '#' + element.id : ''}`);
            }
        };

        // State management
        const state = {
            isRunning: false,
            timers: [],
            lastMajorActivity: 0
        };

        // Start function with Firefox optimizations
        const start = () => {
            if (state.isRunning) return;
            
            state.isRunning = true;
            if (config.debug) console.log('Starting Firefox keep-alive');
            
            try {
                localStorage.setItem(config.persistenceKey, 'true');
            } catch (e) {
                if (config.debug) console.log('Firefox localStorage set error:', e);
            }
            
            // Initial actions
            simulateMouseMove();
            performKeepAliveActions();
            
            // Set intervals
            state.timers = [
                setInterval(performKeepAliveActions, config.clickInterval),
                setInterval(simulateMouseMove, config.moveInterval),
                setInterval(() => {
                    state.lastMajorActivity = Date.now();
                    if (config.debug) console.log('Performing major activity cycle');
                    simulateMouseMove();
                    performKeepAliveActions();
                }, config.activityInterval)
            ];
        };

        // Stop function
        const stop = () => {
            if (!state.isRunning) return;
            
            if (config.debug) console.log('Stopping Firefox keep-alive');
            state.timers.forEach(clearInterval);
            state.timers = [];
            state.isRunning = false;
            
            try {
                localStorage.removeItem(config.persistenceKey);
            } catch (e) {
                if (config.debug) console.log('Firefox localStorage remove error:', e);
            }
        };

        // Expose controls
        window.firefoxCodespacesKeepAlive = {
            start,
            stop,
            isRunning: () => state.isRunning,
            getConfig: () => ({...config})
        };

        // Auto-start if persisted
        if (shouldAutoStart()) {
            start();
        }
    }

    // Initialize with Firefox-specific adjustments
    init();
})();
